import os
import pickle
import sys
import unittest

import torch

classToTestFolderPath = os.path.dirname(__file__)
auto_discFolderPath = os.path.abspath(os.path.join(classToTestFolderPath, "../"*7 + "/libs/auto_disc/auto_disc"))
sys.path.insert(0, os.path.dirname(auto_discFolderPath))

from auto_disc.systems.python_systems.lenia import Lenia, LeniaStepFFT, LeniaStepConv2d, create_colormap, im_from_array_with_colormap
__location__ = os.path.realpath(os.path.join(os.getcwd(), os.path.dirname(__file__)))

Object = lambda **kwargs: type("Object", (), kwargs)()

#region Lenia


#endregion

#region LeniaStepFFT

def test_LeniaStepFFT_forward_1():
    torch.manual_seed(0)
    sx = 5
    sy = 5
    input = torch.rand(1, 1, sx, sy)
    with open(os.path.join(__location__, "run_parameters.pickle"), "rb") as parametersFile :
        run_parameters = pickle.load(parametersFile)
    leniaStepFFT = LeniaStepFFT(SX=sx, SY=sy,**run_parameters)
    res = leniaStepFFT.forward(input)
    assert res.tolist()[0][0] == [
        [0.8940625188122535, 0.6318293814105334, 0.38339246081388156, 0.8447572021055564, 0.5690336375826549],
        [0.7151574100398393, 0.10261569410197593, 0.2751171479865054, 0.5053504374305756, 0.21224540934303368],
        [0.3768783688774575, 0.10080906397343294, 0.27927629112404395, 0.545914765879497, 0.4058579180202637],
        [0.3648100185561107, 0.3312911043760308, 0.12944811540660142, 0.5890476930414752, 0.7088834186028972],
        [0.13437599251610244, 0.6007486404954043, 0.0337447800366764, 0.4477615784243451, 0.1500297220147525]
    ]

def test_LeniaStepFFT_forward_2():
    torch.manual_seed(1)
    sx = 256
    sy = 256
    input = torch.rand(1, 1, sx, sy)
    with open(os.path.join(__location__, "run_parameters.pickle"), "rb") as parametersFile :
        run_parameters = pickle.load(parametersFile)
    leniaStepFFT = LeniaStepFFT(SX=sx, SY=sy,**run_parameters)
    res = leniaStepFFT.forward(input)
    assert list(res.shape) == [1, 1, 256, 256]
    assert res.shape.numel() == 65536
    assert res[0][0][100][100].item() == 0.34667892931432154
#endregion

#region LeniaStepConv2d

def test_LeniaStepConv2d_forward_1():
    torch.manual_seed(0)
    sx = 15
    sy = 15
    input = torch.rand(1, 1, sx, sy)
    run_parameters = {"R":torch.tensor(13, dtype=torch.float64),"T":torch.tensor(10, dtype=torch.float32),"b":torch.tensor([1], dtype=torch.float32),"m":torch.tensor(0.15, dtype=torch.float32),"s":torch.tensor(0.015, dtype=torch.float32),"kn":1,"gn":1}
    leniaStepConv2d = LeniaStepConv2d(**run_parameters)
    res = leniaStepConv2d.forward(input)
    assert res.tolist()[0][0] == [
        [0.870053000316437, 0.6078198629096718, 0.35938294163733475, 0.8207476826318442, 0.5450241186326487, 0.6911478906901876, 0.07860617371063483, 0.2511076229038123, 0.4813409183174584, 0.18823589064603408, 0.3528688473909981, 0.07679952471359797, 0.2552667568491903, 0.5219052471894116, 0.3818483992915924],
        [0.34080049755424335, 0.30728157287432545, 0.10543859197147099, 0.5650381742600333, 0.6848738989650016, 0.11036647342826844, 0.576739119427563, 0.009735258747329945, 0.42375205791212733, 0.12602020144827442, 0.45824307389010965, 0.48752896034633075, 0.5819456841900923, 0.6453761590874703, 0.12765563510676514],
        [0.7098922649418566, 0.5305903119054689, 0.09588814421909175, 0.052726236387812264, 0.38150650072860914, 0.8175058109998053, 0.4720397087079933, 0.3808294216937914, 0.696058606850372, 0.26797020283936956, 0.1721837091152486, 0.0, 0.6486882668282278, 0.24175585111812048, 0.43822500706435785],
        [0.3663654173777514, 0.7634864592681743, 0.0, 0.8972603820350965, 0.7796640977488649, 0.6629971672536972, 0.15589973027660997, 0.08960807601178611, 0.8877646683050723, 0.6796018752736459, 0.2618793450234249, 0.4658438581110631, 0.641199689504427, 0.0, 0.48360463160758305],
        [0.46971327537661434, 0.0, 0.0630045481094097, 0.8986809612371834, 0.5006669742803819, 0.049139718724187875, 0.29413691065151304, 0.763403615818545, 0.011169181124988103, 0.709525951776504, 0.6889851928083747, 0.697654393434225, 0.30671398763165136, 0.6236211052104063, 0.0],
        [0.15659200600906442, 0.08865345786177181, 0.06256444755528878, 0.39512838257242977, 0.05435919071969331, 0.12953933589501054, 0.31060062175296443, 0.2740821903691927, 0.08290069678490908, 0.29976685618284415, 0.4176780251712613, 0.5120128219594748, 0.29015670682554817, 0.438422145837539, 0.09861329774549676],
        [0.3292197257193097, 0.7564509578786274, 0.8220216961141293, 0.0, 0.6036744411493131, 0.07591256842410643, 0.07848708615135391, 0.08026359644673375, 0.5691781838813285, 0.5163473812660042, 0.06827276539488047, 0.8763201239644436, 0.57735399501392, 0.4621401930632896, 0.34643056534847805],
        [0.8702240910402671, 0.4018658127371737, 0.8718945673923875, 0.7711800043246416, 0.1299712547924866, 0.6127754431117687, 0.34494866153999515, 0.43356032995076654, 0.0508773631566537, 0.5579348605609616, 0.0, 0.3993554337841392, 0.34684997086207014, 0.6940168200927823, 0.20469970004085702],
        [0.22076866938753803, 0.6123367929846056, 0.0, 0.7919226607057057, 0.0, 0.7933083876335724, 0.20767510748252316, 0.5252239765880268, 0.0, 0.0, 0.5955946665023976, 0.018295133269877972, 0.3508924959842491, 0.7822074362034257, 0.18813903375704977],
        [0.007418798776271385, 0.11812392735485733, 0.6552704648193197, 0.40750604528057277, 0.4449539271057523, 0.027433365888072436, 0.6667131872820504, 0.5513552574716737, 0.5590377126769679, 0.0, 0.4638234352117413, 0.16466374227718583, 0.00039155444462801725, 0.6661793070431574, 0.5386622610164308],
        [0.0, 0.8221720859691546, 0.6855236555053951, 0.565994245396861, 0.48332432552624616, 0.6208499249497856, 0.2892309228285429, 0.41832444040660055, 0.8113936567770893, 0.5539964577913078, 0.23412617214477194, 0.755409344172653, 0.6698793637576641, 0.25100381964259133, 0.7680567805781219],
        [0.5852465761267384, 0.8904393013890733, 0.13506543207098043, 0.0, 0.39757973493519594, 0.0, 0.1841955832768042, 0.4928841478182163, 0.8326344336803402, 0.39289486900614556, 0.49775060245893576, 0.1802381234143977, 0.610487654270109, 0.540690132870871, 0.10611657167398836],
        [0.1936327442652196, 0.6877769695496839, 0.06414294050840263, 0.10448541129655631, 0.17027571875454617, 0.3022711162403193, 0.8759692483694279, 0.03563477884256694, 0.18991029804456983, 0.7633511310183697, 0.45674610579753017, 0.6600084396926038, 0.22327519208162683, 0.0, 0.5000315899772826],
        [0.3596266589697289, 0.6451609027002784, 0.8220767412998996, 0.7437247530428575, 0.5852562354625254, 0.4579561604879182, 0.011459242477126264, 0.5357629845299335, 0.728331727682961, 0.4420369393771091, 0.6272442534969055, 0.2964049699169762, 0.0711276407034761, 0.8142196673965745, 0.28280282572361604],
        [0.1141616184101999, 0.105017305798351, 0.8841613308396763, 0.18423029618044895, 0.19325782112804557, 0.05947956011791422, 0.29511294426916945, 0.23404953129749284, 0.7734566314496863, 0.8872415144854509, 0.05482663961904066, 0.08854680477868104, 0.11408434978796833, 0.2999089633048364, 0.08241199338648553],
    ]

def test_LeniaStepConv2d_forward_2():
    torch.manual_seed(1)
    sx = 256
    sy = 256
    input = torch.rand(1, 1, sx, sy)
    run_parameters = {"R":torch.tensor(13, dtype=torch.float64),"T":torch.tensor(10, dtype=torch.float32),"b":torch.tensor([1], dtype=torch.float32),"m":torch.tensor(0.15, dtype=torch.float32),"s":torch.tensor(0.015, dtype=torch.float32),"kn":1,"gn":1}
    leniaStepConv2d = LeniaStepConv2d(**run_parameters)
    res = leniaStepConv2d.forward(input)
    assert list(res.shape) == [1, 1, 256, 256]
    assert res.shape.numel() == 65536
    assert res[0][0][100][100].item() == 0.3226694085145483

#endregion