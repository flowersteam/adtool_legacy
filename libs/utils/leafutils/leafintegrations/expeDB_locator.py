from typing import Any, Dict
import requests
import json
from hashlib import sha1
import codecs
from leaf.leaf import Leaf, Locator


class ExpeDBService(Leaf):
    DB_URL = ""

    def create_locator(self, bin, label: str, url: str) -> 'Locator':
        return ExpeDBLocator(bin, label, url)

    def store_locator(self, loc: 'Locator') -> None:
        """ Stores Locator, with the key hash leaf_uid generated by Mongo """
        entrypoint_url = loc.db_url + \
            "/checkpoint_saves/" + \
            loc.db_row_uid + "/files"

        bin = loc.serialize()
        # encode in base64 so MongoDB doesn't escape anything
        b64_bin = codecs.encode(bin, encoding="base64")
        file_dict = {loc.label + "_ref": b64_bin}

        requests.post(entrypoint_url, files=file_dict)
        return

    @classmethod
    def retrieve_locator(cls, leaf_uid: str) -> 'Locator':
        """ 
        leaf_uid is the subpath of the URL, i.e., '<hash>/file_name'
        Note that leaf_uid must end in '_ref'
        """
        entrypoint_url = cls.DB_URL + "/checkpoint_saves/" + leaf_uid
        response = requests.get(entrypoint_url)

        # decode back into unencoded bytes
        retrieved_bin = codecs.decode(
            response.text.encode(), encoding="base64")

        return retrieved_bin


class ExpeDBLocator(Locator):
    def __init__(self, bin, label: str, url: str):
        self.db_url = url
        self.uid = sha1(bin).hexdigest()
        self.label = label
        self.db_row_uid = self._initial_post()

    def _initial_post(self) -> str:
        """ Initial post to DB, with metadata """
        # TODO: hardcoded metadata for now
        entrypoint_url = self.db_url + "/checkpoint_saves"
        response = requests.post(
            entrypoint_url,
            json={
                "checkpoint_id": 100,
                "run_idx": 100,
                "seed": 100
            }
        )
        db_row_uid = response.json()["ID"]
        return db_row_uid

    def store(self, bin: bytes) -> None:
        entrypoint_url = self.db_url + "/checkpoint_saves/" \
            + self.db_row_uid + "/files"

        # encode in base64 so MongoDB doesn't escape anything
        bin = codecs.encode(bin, encoding="base64")

        file_dict = {self.label: bin}
        requests.post(entrypoint_url, files=file_dict)
        # TODO: check for HTTP failure codes
        return

    def retrieve(self) -> bytes:
        entrypoint_url = self.db_url + "/checkpoint_saves/" + \
            self.db_row_uid + "/" + self.label
        response = requests.get(entrypoint_url)

        # decode to binary
        retrieved_bin = codecs.decode(
            response.text.encode(), encoding="base64")
        return retrieved_bin
